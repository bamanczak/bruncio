---
const {
    title,
    classes = "",
    windowName,
    footnote = "...",
    showBackButton = false,
    backButtonDestination = "blog",
} = Astro.props;
import BeautifulButton from "./BeautifulButton.astro";
import "animate.css";
import "overlayscrollbars/overlayscrollbars.css";
---

<astro-post-desktop-window
    data-windowName={windowName}
    class=`pane border-4 border-black rounded-2xl animate__animated ${classes}`
>
    <div class="title-container select-none">
        <div
            class="title change-on-drag bg-mywhite grid grid-cols-8 border-b-4 border-black flex items-center justify-center"
        >
            <div
                class="col-start-1 col-end-1 flex items-center justify-start button-container window-opener change-on-drag button-inner-container"
            >
                <BeautifulButton
                    classes={"button-back-to-posts " +
                        (showBackButton ? " " : "hidden")}
                    iconName="material-symbols:arrow-left-alt"
                    ariaLabel="Go back to the list"
                    clickDestination={backButtonDestination}
                />
            </div>
            <h2
                class="pixelated change-on-drag col-start-3 col-end-7 bg-mywhite text-ellipsis line-clamp-1 text-center"
            >
                {title}
            </h2>
            <div
                class="col-start-8 col-end-8 flex items-center justify-end button-container window-opener change-on-drag button-inner-container flex flex-row gap-1 items-center justify-end bg-mywhite"
            >
                <BeautifulButton
                    classes="button-expand max-lg:hidden"
                    iconName="material-symbols:expand-content"
                    ariaLabel="Toggle fullscreen mode for the panel"
                />
                <BeautifulButton
                    classes="button-close"
                    iconName="material-symbols:close"
                    ariaLabel="Close the panel"
                />
            </div>
        </div>
    </div>
    <div
        class="bg-mywhite content text-black scrollable"
        data-overlayscrollbars-initialize
        id={"pane-content" + windowName}
    >
        <slot />
    </div>
    <div class="flex justify-end">
        <div
            class="pane-footer pixelated
            bg-black text-mywhite text-xs
            flex-grow flex items-center justify-center"
        >
            {footnote}
        </div>
    </div>
    <div class="corner flex items-center justify-center">
        <div class="corner-inner"></div>
    </div>
    <div class="dummy-scrollbar top-button flex items-center justify-center">
        <i class="arrow up cursor-pointer"></i>
    </div>
    <div class="dummy-scrollbar bottom-button flex items-center justify-center">
        <i class="arrow down cursor-pointer"></i>
    </div>
</astro-post-desktop-window>

<style>
    /* This is called mobile-importanter design */
    @media (max-width: 768px) {
        .pane {
            left: 2px !important;
            top: 37px !important;
            width: calc(100vw - 4px);
            /* height: ; */
            height: var(--app-height) !important;
            max-height: var(--app-height) !important;
            min-width: calc(100vw - 4px) !important;
            box-shadow: none !important;
        }
    }

    .pane {
        position: absolute;
        width: 80vw;
        height: 90vh;
        left: calc(20vw - 20px);
        top: 56px;

        display: grid;
        /* Ta linijka przesuwa w dół content, nie wiem jak działa, wcześniej było:
                grid-template-rows: var(--title-bar-height) 1fr;
                pewnie moznaby to zrobic lepiej
        */
        grid-template-rows: 40px 1fr;

        box-shadow: 12px 12px 0 rgba(64, 64, 64, 0.8);
        overflow: clip;
        min-width: 420px;
        min-height: 160px;

        font-size: 16px;
    }

    .pane .title {
        cursor: move;
        height: 40px;
        color: var(--title-bar-text-color);
    }

    .pane h2 {
        font-size: 1rem;
        font-weight: 400;
    }

    .pane .content {
        position: relative;
        overflow: scroll;
        overflow-x: hidden;
        padding: 1rem;
        padding-right: 2rem;
        scroll-behavior: smooth;
    }

    .pane-footer {
        height: 20px;
    }

    /* scrollbar starts here */

    .dummy-scrollbar {
        width: 20px;
        height: 16px;
        background-color: black;
        border-left: 4px solid #000000;
        position: absolute;
        right: 0;
    }
    .dummy-scrollbar.top-button {
        top: 40px;
    }
    .dummy-scrollbar.bottom-button {
        bottom: 20px;
    }

    .arrow {
        border: solid white;
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 3px;
    }

    .arrow.up {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
    }

    .arrow.down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
    }

    /* make image fill the space */
    .pane .content img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        max-width: 100%;
        max-height: 100%;

        object-fit: cover;

        -webkit-user-drag: none;
        user-drag: none;
    }

    /* add a corner in bottom right */
    .pane .corner {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 24px;
        height: 24px;

        /* north west to south east */
        cursor: nwse-resize;
    }

    .corner-inner {
        width: 21px;
        height: 21px;
        background-image: linear-gradient(
            -45deg,
            rgba(0, 0, 0, 0) 0%,
            rgba(0, 0, 0, 0) 18.75%,
            #faf4e6 18.75%,
            #faf4e6 25%,
            rgba(0, 0, 0, 0) 25%,
            rgba(0, 0, 0, 0) 31.25%,
            #faf4e6 31.25%,
            #faf4e6 37.5%,
            rgba(0, 0, 0, 0) 37.5%,
            rgba(0, 0, 0, 0) 100%
        );
    }

    .pane.is-dragging .title {
        background-color: #ebe1db;
    }

    .pane.is-dragging .change-on-drag {
        background-color: #ebe1db;
    }

    .button-container {
        padding-bottom: 3px;
    }
    .button-inner-container {
        padding-left: 3px;
        padding-right: 4px;
    }
</style>
<script>
    import { OverlayScrollbars } from "overlayscrollbars";

    import {
        closePanel,
        showPanelOnTop,
        expandPanel,
    } from "../scripts/panesOpener.ts";
    import {
        blogExpanded,
        blogHeight,
        blogWidth,
        blogPositionDefault,
        blogPositionLeft,
        blogPositionTop,
    } from "../store.ts";
    import { moveObject, resizeObject } from "../scripts/windowMover.ts";
    import { navigate } from "astro:transitions/client";

    class AstroPostDesktopWindow extends HTMLElement {
        constructor() {
            super();

            showPanelOnTop(this);
            const content = this.querySelector(".content") as HTMLElement;
            const scrollbar = OverlayScrollbars(content, {
                scrollbars: { visibility: "visible" },
            });
            const horizontalScrollbar = content.querySelector(
                ".os-scrollbar-horizontal",
            ) as HTMLElement;
            horizontalScrollbar.classList.add("invisible");
            const viewport = scrollbar.elements();

            if (blogExpanded.get() == "true") {
                expandPanel(this);
            } else if (blogPositionDefault.get() == "false") {
                this.style.width = blogWidth.get() + "px";
                this.style.height = blogHeight.get() + "px";
                this.style.left = blogPositionLeft.get() + "px";
                this.style.top = blogPositionTop.get() + "px";
            }

            this.addEventListener("mousedown", () => {
                showPanelOnTop(this);
            });

            const buttonBack = this.querySelector(".button-back-to-posts");
            buttonBack!.addEventListener("click", () => {
                const destination = buttonBack!.getAttribute(
                    "data-clickDestination",
                ) as string;
                navigate("/" + destination);
            });

            const buttonClose = this.querySelector(".button-close");
            buttonClose!.addEventListener("click", () => {
                closePanel(this);
            });

            const buttonExpand = this.querySelector(".button-expand");
            buttonExpand!.addEventListener("click", () => {
                expandPanel(this, true, true);
            });

            const title = this.querySelector(".title");
            title!.addEventListener("dblclick", () => {
                expandPanel(this, true, true);
            });

            title!.addEventListener("mousedown", (event) => {
                moveObject(this, event as MouseEvent, true);
            });

            const corner = this.querySelector(".corner");
            corner!.addEventListener("mousedown", (event) => {
                resizeObject(this, event as MouseEvent, true);
            });

            const scrollUpButton = this.querySelector(".arrow.up");
            scrollUpButton!.addEventListener("mousedown", () => {
                viewport.content.scrollBy({
                    top: -200,
                    behavior: "smooth",
                });
            });

            const scrollDownButton = this.querySelector(".arrow.down");
            scrollDownButton!.addEventListener("mousedown", () => {
                viewport.content.scrollBy({
                    top: 200,
                    behavior: "smooth",
                });
            });
        }
    }

    customElements.define("astro-post-desktop-window", AstroPostDesktopWindow);
</script>
