---
const { title, classes, windowName } = Astro.props;
import BeautifulButton from "./BeautifulButton.astro";
import "animate.css";
---

<astro-desktop-window
    data-windowName={windowName}
    class=`pane border-4 border-black rounded-2xl animate__animated ${classes}`
    style="left: calc(50vw - 320px); top: calc(50vh - 80px)"
    transition:animate="none"
>
    <div class="title-container select-none">
        <div
            class="title change-on-drag bg-mywhite grid grid-cols-8 border-b-4 border-black"
        >
            <h2
                class="change-on-drag col-start-3 col-end-7 flex items-center justify-center bg-mywhite"
            >
                {title}
            </h2>
            <div
                class="col-start-8 col-end-8 flex items-center justify-end button-container"
            >
                <div
                    class="window-opener change-on-drag button-inner-container flex flex-row gap-1 items-center justify-end bg-mywhite"
                >
                    <BeautifulButton
                        classes="button-expand"
                        iconName="material-symbols:expand-content"
                    />
                    <BeautifulButton
                        classes="button-close"
                        iconName="material-symbols:close"
                    />
                </div>
            </div>
        </div>
    </div>
    <div class="bg-mywhite content text-black scrollable">
        <slot />
    </div>
    <div class="flex justify-end">
        <div
            class="pane-footer
            bg-black text-mywhite text-xs
            flex-grow flex items-center justify-center"
        >
            Some info
        </div>
    </div>
    <div class="corner flex items-center justify-center">
        <div class="corner-inner"></div>
    </div>
    <div class="dummy-scrollbar top-button flex items-center justify-center">
        <i class="arrow up"></i>
    </div>
    <div class="dummy-scrollbar bottom-button flex items-center justify-center">
        <i class="arrow down"></i>
    </div>
</astro-desktop-window>

<style>
    .pane {
        position: absolute;
        width: var(--pane-default-width);
        height: var(--pane-default-height);

        display: grid;
        /* Ta linijka przesuwa w dół content, nie wiem jak działa, wcześniej było:
                grid-template-rows: var(--title-bar-height) 1fr;
                pewnie moznaby to zrobic lepiej
        */
        grid-template-rows: 40px 1fr;

        box-shadow: 12px 12px 0 rgba(64, 64, 64, 0.8);
        overflow: clip;
        min-width: 420px;
        min-height: 160px;
    }

    .pane .title {
        cursor: move;
        height: 40px;
        /* display: flex;
        align-items: center;
        justify-content: center; */

        /* background-color: var(--title-bar-color); */
        color: var(--title-bar-text-color);
        /* background: linear-gradient(
            to bottom,
            black,
            black 10%,
            black 10%,
            black
        ); */
        /* background-image: linear-gradient(
            rgba(0, 0, 0, 0) 0%,
            rgba(0, 0, 0, 0) 15.63%,
            #000000 15.63%,
            #000000 21.88%,
            rgba(0, 0, 0, 0) 21.89%,
            rgba(0, 0, 0, 0) 28.13%,
            #000000 28.13%,
            #000000 34.38%,
            rgba(0, 0, 0, 0) 34.38%,
            rgba(0, 0, 0, 0) 40.63%,
            #000000 40.63%,
            #000000 46.88%,
            rgba(0, 0, 0, 0) 46.88%,
            rgba(0, 0, 0, 0) 53.13%,
            #000000 53.13%,
            #000000 59.38%,
            rgba(0, 0, 0, 0) 59.38%,
            rgba(0, 0, 0, 0) 65.63%,
            #000000 65.63%,
            #000000 71.88%,
            rgba(0, 0, 0, 0) 71.88%,
            rgba(0, 0, 0, 0) 78.13%,
            #000000 78.13%,
            #000000 84.38%,
            rgba(0, 0, 0, 0) 84.38%,
            rgba(0, 0, 0, 0) 100%
        ); */
        /* // linear gradient that replicates the look of the title bar in Macintosh System 1
        // https://www.paintcodeapp.com/news/ultimate-guide-to-dark-mode-design
        background-image: ; */
    }

    .pane h2 {
        font-size: 1rem;
        font-weight: 400;
    }

    .pane .content {
        position: relative;
        overflow: scroll;
        overflow-x: hidden;
        padding: 1rem;
        /* background-color: var(--pane-content-background-color); */
    }

    .pane-footer {
        height: 20px;
    }

    /* scrollbar starts here */

    .dummy-scrollbar {
        width: 20px;
        height: 16px;
        background-color: black;
        border-left: 4px solid #000000;
        position: absolute;
        right: 0;
    }
    .dummy-scrollbar.top-button {
        top: 40px;
    }
    .dummy-scrollbar.bottom-button {
        bottom: 20px;
    }

    .arrow {
        border: solid white;
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 3px;
    }

    .arrow.up {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
    }

    .arrow.down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
    }

    .scrollable {
        --sb-track-color: #faf4e6;
        --sb-thumb-color: #000000;
        --sb-size: 20px;
    }

    .scrollable::-webkit-scrollbar {
        width: var(--sb-size);
        border-left: 4px solid #000000;
        background-image: radial-gradient(
            circle at 0.8px 0.8px,
            rgba(0, 0, 0, 1) 1px,
            transparent 0
        );
        background-size: 10px 10px;
        margin-top: 30px;
    }

    .scrollable::-webkit-scrollbar-track {
        background: var(--sb-track-color);
        border-radius: 0px;
        /* dotted background */
        background-image: radial-gradient(
            circle at 0.8px 0.8px,
            rgba(0, 0, 0, 0.5) 2px,
            transparent 0
        );
        background-size: 5px 5px;
        margin-top: 16px;
        margin-bottom: 16px;
        border-left: 4px solid #000000;
    }

    .scrollable::-webkit-scrollbar-thumb {
        background: var(--sb-thumb-color);
        border-radius: 0px;
        /* border: 4px solid #faf4e6; */
    }

    @supports not selector(::-webkit-scrollbar) {
        .scrollable {
            scrollbar-color: var(--sb-thumb-color) var(--sb-track-color);
        }
    }
    /* scrollbar ends here */

    /* make image fill the space */
    .pane .content img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        max-width: 100%;
        max-height: 100%;

        object-fit: cover;

        -webkit-user-drag: none;
        user-drag: none;
    }

    /* add a corner in bottom right */
    .pane .corner {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 24px;
        height: 24px;

        /* north west to south east */
        cursor: nwse-resize;

        /* background-color: red; */
    }
    .corner-inner {
        /* margin: 4px; */
        width: 21px;
        height: 21px;
        background-image: linear-gradient(
            -45deg,
            rgba(0, 0, 0, 0) 0%,
            /* rgba(0, 0, 0, 0) 6.25%,
            #faf4e6 6.25%,
            #faf4e6 12.5%,
            rgba(0, 0, 0, 0) 12.5%, */
                rgba(0, 0, 0, 0) 18.75%,
            #faf4e6 18.75%,
            #faf4e6 25%,
            rgba(0, 0, 0, 0) 25%,
            rgba(0, 0, 0, 0) 31.25%,
            #faf4e6 31.25%,
            #faf4e6 37.5%,
            rgba(0, 0, 0, 0) 37.5%,
            rgba(0, 0, 0, 0) 100%
        );
    }

    .pane.is-dragging .title {
        background-color: #ebe1db;
    }

    .pane.is-dragging .change-on-drag {
        /* background-image: linear-gradient(red 0%, red 100%); */
        background-color: #ebe1db;
    }

    .button-container {
        padding-bottom: 3px;
    }
    .button-inner-container {
        padding-left: 3px;
        padding-right: 4px;
    }
</style>
<script>
    import { closePanel } from "../scripts/panesOpener.ts";
    import { moveObject, resizeObject } from "../scripts/windowMover.ts";
    import { zIndex } from "../store.js";

    class AstroDesktopWindow extends HTMLElement {
        constructor() {
            super();
            const menuHeight = 36;
            const title = this.querySelector(".title");
            const corner = this.querySelector(".corner");
            const buttonClose = this.querySelector(".button-close");
            const buttonExpand = this.querySelector(".button-expand");
            const fullScreenClass = "full-screen";

            function expandPanel(pane: HTMLElement) {
                pane.style.transition = "all 0.3s ease-in-out";
                if (pane.classList.contains(fullScreenClass)) {
                    pane.classList.remove(fullScreenClass);

                    pane.style.height = "40vh";
                    pane.style.width = "40vw";
                    pane.style.left = "calc(50vw - 20vw)";
                    pane.style.top = `calc(50vh - 20vh + ${menuHeight}px)`;
                } else {
                    pane.classList.add(fullScreenClass);
                    pane.style.width = "100%";
                    pane.style.left = "0px";
                    pane.style.top = `${menuHeight}px`;
                    pane.style.height = `calc(100vh - ${menuHeight}px)`;
                }

                setTimeout(function () {
                    pane.style.transition = "none";
                }, 400);
            }

            function changePanelZIndex(pane: HTMLElement, newIndex: string) {
                pane.style.zIndex = newIndex;
            }

            this.addEventListener("mousedown", () => {
                const currentIndex = zIndex.get() + 1;
                zIndex.set(currentIndex);
                this.style.zIndex = currentIndex.toString();
            });

            buttonClose!.addEventListener("click", () => {
                closePanel(this);
            });

            buttonExpand!.addEventListener("click", () => {
                expandPanel(this);
            });

            title!.addEventListener("dblclick", () => {
                expandPanel(this);
            });

            title!.addEventListener("mousedown", (event) => {
                moveObject(this, event as MouseEvent);
            });

            corner!.addEventListener("mousedown", (event) => {
                resizeObject(this, event as MouseEvent);
            });
        }
    }

    customElements.define("astro-desktop-window", AstroDesktopWindow);
</script>
